{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "dbUserNameSeed": {
      "type": "string",
      "metadata": {
        "description": "A seed used to generate the username for the MSSQL database. This is used so a potential bad person who gets access to the repository cant figure out the username. It is possible, but then he also need to gain access to what ever used for providing the seed."
      }
    },
    "dbPasswordSeed": {
      "type": "string",
      "metadata": {
        "description": "A seed used to generate the password for the MSSQL database. This is used so a potential bad person who gets access to the repository cant figure out the password. It is possible, but then he also need to gain access to what ever used for providing the seed."
      }
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Vault"
      }
    },
    "environment": {
      "type": "string",
      "metadata": {
        "description": "Defines the environment to set up"
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Tenant Id of the subscription. Get using Get-AzureRmSubscription cmdlet or Get Subscription API"
      }
    },
    "objectId": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the AD user. Get using Get-AzureRmADUser or Get-AzureRmADServicePrincipal cmdlets"
      }
    },
    "keysPermissions": {
      "type": "array",
      "defaultValue": [
        "all"
      ],
      "metadata": {
        "description": "Permissions to keys in the vault. Valid values are: all, create, import, update, get, list, delete, backup, restore, encrypt, decrypt, wrapkey, unwrapkey, sign, and verify."
      }
    },
    "secretsPermissions": {
      "type": "array",
      "defaultValue": [
        "all"
      ],
      "metadata": {
        "description": "Permissions to secrets in the vault. Valid values are: all, get, set, list, and delete."
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "SKU for the vault"
      }
    },
    "enableVaultForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies if the vault is enabled for a VM deployment"
      }
    },
    "enableVaultForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
      }
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
   // "connectionstrings" :[{"name" :"test", "connectionString" :"[concat('Server=tcp:', reference(resourceId('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('databaseName'), ';Persist Security Info=False;User ID=', variables('sqlserverAdministratorLogin'), ';Password=', variables('sqlserverAdministratorLoginPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]", "type" :"SQLAzure" } ] , 
    //"appsettings" :[{"name":"test" , "value" :"[parameters('environment')]"}, {"name" :"test2", "value":"[variables('sqlserverName')]"}, {"name" :"testy", "value" :"test1" }, {"name" :"fg", "value" :"ghkhhkgk" } ], 
   // "queueStorageConnectionStringSecretNameResourceId-v": "[resourceId('Microsoft.KeyVault/vaults/secrets',variables('keyVaultName-v'),variables('queueStorageConnectionStringSecretName-v'))]",
    "storageAccountResourceId": "[resourceId('Microsoft.Storage/storageAccounts',variables('queueStorageName-v'))]",
    "queueStorageConnectionStringSecretName-v": "[concat('testQueueStorageConnectionSecret','-',parameters('environment'))]",
    "queueStorageName-v": "[concat('dftestqueuestorage',parameters('environment'))]",
    "keyVaultName-v": "[concat(parameters('keyVaultName'),'-',parameters('environment'))]",
    "webapiName-v": "[concat('microservices-webapi','-',parameters('environment'))]",
    "functionsName-v": "[concat('microservices-datafunctions','-',parameters('environment'))]",
    "functionStorageName-v": "[concat('datafunctionstorage',parameters('environment'))]",
    "appServicePlanName-v": "WebApiPlan",
    "functionsPlanName-v": "FunctionsPlan",
    "sqlserverName": "[concat('microservicessqlserver',parameters('environment'))]",
    "databaseName": "[concat('sqldb',parameters('environment'))]",
    "sqlAdministratorLogin": "[concat('l', uniqueString(resourceGroup().id, parameters('dbUserNameSeed')))]",
    "sqlAdministratorLoginPassword": "[concat('P', uniqueString(resourceGroup().id, parameters('dbPasswordSeed')), 'x', '!')]",
    "storageAccountid": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('functionStorageName-v'))]"

  },
  "resources": [
    {
      "name": "[variables('sqlserverName')]",
      "type": "Microsoft.Sql/servers",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "SqlServer"
      },
      "apiVersion": "2014-04-01",
      "properties": {
        "administratorLogin": "[variables('sqlAdministratorLogin')]",
        "administratorLoginPassword": "[variables('sqlAdministratorLoginPassword')]",
        "version": "12.0"
      },
      "resources": [
        {
          "name": "[variables('databaseName')]",
          "type": "databases",
          "location": "[parameters('location')]",
          "tags": {
            "displayName": "Database"
          },
          "apiVersion": "2015-01-01",
          "dependsOn": [
            "[variables('sqlserverName')]"
          ],
          "properties": {
            "edition": "Basic",
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "maxSizeBytes": "1073741824",
            "requestedServiceObjectiveName": "Basic"
          }
        },
        {
          "type": "firewallrules",
          "apiVersion": "2014-04-01",
          "dependsOn": [
            "[variables('sqlserverName')]"
          ],
          "location": "[parameters('location')]",
          "name": "AllowAllWindowsAzureIps",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2015-04-01",
      "name": "[variables('functionsPlanName-v')]",
      "location": "[parameters('location')]",
      "properties": {
        "name": "[variables('functionsPlanName-v')]",
        "computeMode": "Dynamic",
        "sku": "Dynamic"
      }
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites/slots",
      "name": "[concat(variables('webapiName-v'), '/','Preview')]",
      "kind": "app",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "comments": "This specifies the web app slots.",
      "tags": {
        "displayName": "WebAppSlots"
      },
      "properties": {
        "siteconfig" :{"appsettings" : [{"name":"test" , "value" :"[parameters('environment')]"}, {"name" :"test2", "value":"[variables('sqlserverName')]"}, {"name" :"testy", "value" :"test1" }, {"name" :"fg", "value" :"ghkhhkgk" }, {"name" :"added", "value" :"ffgh" }, {"name" :"added2", "value" :"2"}, {"name" :"added3", "value" :"a" }, {"name" :"added4", "value" :"as" }, {"name" :"added5", "value" :"asd" } ] } , 
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName-v'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', variables('webapiName-v'))]"
      ]
    },
    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('functionsName-v')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('functionsPlanName-v'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageName-v'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('functionsPlanName-v'))]",
        "siteConfig": {
          "appSettings": [
          //  {
            //  "name": "StorageQueueConnectionString",
           //   "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('queueStorageConnectionStringSecretNameResourceId-v')).secretUriWithVersion, ')')]"
          //  },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionStorageName-v'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionStorageName-v'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionStorageName-v'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionsName-v'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "8.11.1"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('functionStorageName-v')]",
      "apiVersion": "2016-12-01",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('queueStorageName-v')]",
      "apiVersion": "2016-12-01",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "apiVersion": "2017-08-01",
      "type": "Microsoft.Web/serverfarms",
      "kind": "app",
      "name": "[variables('appServicePlanName-v')]",
      "location": "[parameters('location')]",
      "comments": "This app service plan is used for the web app and slots.",
      "properties": {},
      "dependsOn": [],
      "sku": {
        "name": "S1"
      }
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "kind": "app",
      "name": "[variables('webapiName-v')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "siteconfig" :{"appsettings" : [{"name":"test" , "value" :"[parameters('environment')]"}, {"name" :"test2", "value":"[variables('sqlserverName')]"}, {"name" :"testy", "value" :"test1" }, {"name" :"fg", "value" :"ghkhhkgk" }, {"name" :"added", "value" :"ffgh" }, {"name" :"added2", "value" :"2"}, {"name" :"added3", "value" :"a" }, {"name" :"added4", "value" :"as" } ] } , 
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName-v'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName-v'))]"
      ]
    }
  // , {
  //    "type": "Microsoft.KeyVault/vaults",
   //   "name": "[variables('keyVaultName-v')]",
  //    "apiVersion": "2016-10-01",
  //    "location": "[parameters('location')]",
  //    "dependsOn": [
   //     "[resourceId('Microsoft.Web/sites', variables('webapiName-v'))]"
   //   ],
   //   "properties": {
    //    "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
    //    "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
    //    "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
      //  "tenantId": "[parameters('tenantId')]",
     //   "accessPolicies": [
     //     {
     //       "tenantId": "[parameters('tenantId')]",
      //      "objectId": "[parameters('objectId')]",
       //     "permissions": {
      //        "keys": "[parameters('keysPermissions')]",
      //        "secrets": "[parameters('secretsPermissions')]"
      //      }
     //     },
      //    {
      //      "tenantId": "[reference(concat(resourceId('Microsoft.Web/sites', variables('functionsName-v')), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').tenantId]",
       //     "objectId": "[reference(concat(resourceId('Microsoft.Web/sites', variables('functionsName-v')), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').principalId]",
        //    "permissions": {
         //     "keys": "[parameters('keysPermissions')]",
        //      "secrets": "[parameters('secretsPermissions')]"
        //    }
       //   },
        //  {
       //     "tenantId": "[reference(concat(resourceId('Microsoft.Web/sites/slots', variables('webapiName-v'),'Preview'), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').tenantId]",
      //      "objectId": "[reference(concat(resourceId('Microsoft.Web/sites/slots', variables('webapiName-v'),'Preview'), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').principalId]",
      //      "permissions": {
     //         "keys": "[parameters('keysPermissions')]",
     //         "secrets": "[parameters('secretsPermissions')]"
   //         }
  //        },
    //      {
     //       "tenantId": "[reference(concat(resourceId('Microsoft.Web/sites', variables('webapiName-v')), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').tenantId]",
      //      "objectId": "[reference(concat(resourceId('Microsoft.Web/sites', variables('webapiName-v')), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').principalId]",
     //       "permissions": {
    //          "keys": "[parameters('keysPermissions')]",
     //         "secrets": "[parameters('secretsPermissions')]"
    //        }
    //      }
    //    ],
    //    "sku": {
   //       "name": "[parameters('skuName')]",
   //       "family": "A"
   //     }
  //    }
  //  },
  //  {
   //   "type": "Microsoft.KeyVault/vaults/secrets",
   //   "name": "[concat(variables('keyVaultName-v'),'/','ARMSecret')]",
    //  "apiVersion": "2018-02-14",
   //   "properties": {
   //     "contentType": "text/plain",
   //     "value": "AnARMSecretSssssh"
    //  },
   //   "dependsOn": [
   //     "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName-v'))]"
  //    ]
  //  },
  //  {
  //    "type": "Microsoft.KeyVault/vaults/secrets",
    //  "name": "[concat(variables('keyVaultName-v'),'/', variables('queueStorageConnectionStringSecretName-v'))]",
  //    "apiVersion": "2018-02-14",
  //    "properties": {
  //      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('queueStorageName-v'), ';AccountKey=', listKeys(variables('storageAccountResourceId'),'2015-05-01-preview').key1)]"
  //    }
  //  },
  //  {
    //  "type": "Microsoft.KeyVault/vaults/secrets",
   //   "name": "[concat(variables('keyVaultName-v'),'/','MSSqlConnectionString')]",
   //   "apiVersion": "2018-02-14",
   //   "properties": {
   //     "contentType": "text/plain",
    //    "value": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('databaseName'), ';User Id=', variables('sqlAdministratorLogin'), '@', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ';Password=', variables('sqlAdministratorLoginPassword'), ';')]"
    //  },
      //"dependsOn": [
     //   "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName-v'))]"
     // ]
    //}
  ]
}
